[gd_resource type="Shader" format=3 uid="uid://d008btg6lubdo"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.stable's StandardMaterial3D.
shader_type spatial;

uniform vec3 primary = vec3(0.4,0.4,0.4);
uniform vec3 secondary = vec3(0.2,0.2,0.2);
uniform vec3 frame = vec3(0.15,0.15,0.15);
uniform vec3 markone = vec3(0.9,0.9,0.9);
uniform vec3 marktwo = vec3(0.7,0.7,0.7);
uniform vec3 light = vec3(0.0,0.0,2.0);
uniform float fade = 1.0;

const vec3 yellow = vec3(1.0,1.0,0);
const vec3 magenta = vec3(1.0,0,1.0);
const vec3 black = vec3(0,0,0);
const vec3 white = vec3(1.0,1.0,1.0);
const vec3 red = vec3(1.0,0,0);
const vec3 green = vec3(0,1.0,0);
uniform float threshold = 0.3;
uniform float redthreshold = 0.3;
uniform float bluthreshold = 0.3;
uniform float grethreshold = 0.3;
uniform sampler2D aux_texture : source_color,filter_linear_mipmap,repeat_enable;

render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16) = 1;
uniform vec3 uv1_scale= vec3(1.0,1.0,1.0);
uniform vec3 uv1_offset;
uniform vec3 uv2_scale= vec3(1.0,1.0,1.0);
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec3 color;
	color = texture(texture_albedo, UV).rgb;
	vec3 aux = texture(aux_texture, UV).rgb;
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	if (color.r>redthreshold&&color.g>grethreshold&&color.b>bluthreshold){
		color = black;
		EMISSION = light*2.0;
	}
	if  (color.r!=0.0&&color.g<threshold&&color.b<threshold||color.r<threshold&&color.g!=0.0&&color.b<threshold||color.r<threshold&&color.g<threshold&&color.b!=0.0) {
      color =  color.r*primary+color.g*secondary+color.b*frame;
if (aux.r>0.01&&aux.g<0.1&&aux.b<0.1){
		color = aux.r*light+aux.g*light+aux.b*light;
		EMISSION = aux.r*light+aux.g*light+aux.b*light;
	}
    }
    //else {
	//if (color.r>0.5&&color.g>0.5&&color.b<0.5){
	//	color = markone;
	//}
	//if (color.r>0.5&&color.g<0.5&&color.b>0.5){
	//	color = marktwo;
	//}
    //if (color.r>redthreshold&&color.g>grethreshold&&color.b>bluthreshold){
	//	color = light;
	//	EMISSION = light*2.0;
	//}
    // }
	ALBEDO = color;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}
"
